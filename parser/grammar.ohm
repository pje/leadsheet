// A grammar for parsing the simple leadsheet format
// - PEG
// - written for OhmJS https://github.com/ohmjs/ohm
// - test it out with the visual editor: https://ohmjs.org/editor
//
// 👉 uppercase names implicitly skip whitespace ("syntactic rule")
// 👉 lowercase names don't ("lexical rule")
//  see: https://ohmjs.org/docs/syntax-reference#syntactic-lexical

// Defines a grammar for Jazz/Pop Chord notation
Chord {
  chord = root flavor

  root = noteLetter accidental?

  flavor = quality? extent? alteration*

  noteLetter =
    | caseInsensitive<"A">
    | "B"
    | caseInsensitive<"C">
    | caseInsensitive<"D">
    | caseInsensitive<"E">
    | caseInsensitive<"F">
    | caseInsensitive<"G">

  accidental =
    | "##" | "𝄪" | "♯♯"
    | "bb" | "𝄫" | "♭♭"
    | "#"  | "♯"
    | "b"  | "♭"
    | "♮"

  alteration_symbol =
    | "Δ"
    | "+"
    | "⁺"
    | "o"
    | "°"
    | "-"
    | "⁻"
    | caseInsensitive<"ø">

  extent =
    | thirteen
    | eleven
    | nine
    | seven
    | six_and_nine
    | six
    | five
    | four
    | three
    | two

  thirteen = | "13" | "¹³"
  eleven = | "11" | "¹¹"
  nine = | "9" | "⁹"
  seven = | "7" | "⁷"
  six_and_nine = | six "/"? nine
  six = | "6" | "⁶"
  five = | "5" | "⁵"
  four = | "4" | "⁴"
  three = | "3" | "³"
  two = | "2" | "²"

  quality =
    | sus
    | minor_major
    | augmented
    | diminished
    | dominant
    | half_diminished
    | major
    | minor

  sus =
    | caseInsensitive<"sus">

  minor_major =
    | minor_major_with_parens
    | caseInsensitive<"minmaj">
    | "mM"
    | "mΔ"
    | "-Δ"
    | "m/M"

  minor_major_with_parens =
    | minor "(" major extent ")"

  augmented =
    | caseInsensitive<"augmented">
    | caseInsensitive<"aug">
    | "+"
    | "⁺"

  diminished =
    | caseInsensitive<"diminished">
    | caseInsensitive<"dim">
    | "o"
    | "°"

  dominant =
    | caseInsensitive<"dominant">
    | caseInsensitive<"dom">

  half_diminished =
    | caseInsensitive<"ø">

  major =
    | caseInsensitive<"major">
    | caseInsensitive<"maj">
    | "M"
    | "ᴹ"
    | "Δ"

  minor =
    | caseInsensitive<"minor">
    | caseInsensitive<"min">
    | "-"
    | "⁻"
    | "m"
    | "ᵐ"

  alteration =
    | alteration_in_parens
    | alteration_no_parens

  alteration_no_parens =
    | accidental extent                          // e.g. #11, b13
    | alteration_symbol extent                   // e.g. Δ9,  ⁺7
    | alteration_add_no_omit extent              // e.g. "no 5", no5, "add 5", "omit 5"
    | "/" root                                   // e.g. C/G
    | caseInsensitive<"alt"> extent?             // e.g. alt, alt7
    | caseInsensitive<"sus"> ("2"|"4")?          // e.g. sus, sus2, sus4
    | quality? extent                            // e.g. `CoM7`

  alteration_in_parens = "(" spaceNoNL? alteration_no_parens spaceNoNL? ")"

  alteration_add_no_omit =
    spaceNoNL* (caseInsensitive<"add"> | caseInsensitive<"no"> | caseInsensitive<"omit">) spaceNoNL*

  newline = "\r"? "\n"
  spaceNoNL = ~newline "\x00".."\x20"
}

// Defines a grammar for a simple, markdown-like format for writing leadsheets
// (actually just chord charts, no melody supported yet)
Song <: Chord {
  Song = metadata* Sections

  Sections = (Section? Bars)+

  Bars = barline (Chordish+ barline)+

  Chordish = chord | NoChord | RepeatPreviousChord

  Section = SectionName colon
  SectionName = (~colon ~"|" any)+

  lineComment = "//"(~newline any)+newline
  space += lineComment // this overrides ohmjs's built-in definition of spaces to include our comments. This seems to be the easiest way to get ohmjs to handle comments (e.g. https://github.com/ohmjs/ohm/blob/39ccead882a/examples/simple-lisp/src/simple-lisp.mjs#L35)

  metadata =
    | meta<"title">
    | meta<"artist">
    | meta<"year">
    | meta<"sig">
    | meta<"key">

  meta<x> = x":" spaceNoNL* (~newline any)+ (newline|lineComment)

  barline =
    | barlineWithRepeats
    | doubleBarline
    | singleBarline

  barlineWithRepeats =
    | barRepeatSignifierClose (doubleBarline | singleBarline)
    | (doubleBarline | singleBarline) barRepeatSignifierOpen

  barRepeatSignifierOpen = (digit caseInsensitive<"x">?)? ":"
  barRepeatSignifierClose = ":" (digit caseInsensitive<"x">?)?

  doubleBarline = "||"
  singleBarline = "|"

  RepeatPreviousChord =
    | "-"
    | "%"
    | "/"
    | "𝄎"

  NoChord =
  	| "NC"
  	| "N.C."

  colon = ":"
}
