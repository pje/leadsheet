// A grammar for parsing the simple leadsheet format
// - PEG
// - written for OhmJS https://github.com/ohmjs/ohm
// - test it out with the visual editor: https://ohmjs.org/editor
//
// üëâ uppercase names implicitly skip whitespace ("syntactic rule")
// üëâ lowercase names don't ("lexical rule")
//  see: https://ohmjs.org/docs/syntax-reference#syntactic-lexical

// Defines a grammar for Jazz/Pop Chord notation
Chord {
  chord = root flavor

  root = noteLetter accidental?

  flavor = quality alteration*

  noteLetter =
    | caseInsensitive<"A">
    | "B"
    | caseInsensitive<"C">
    | caseInsensitive<"D">
    | caseInsensitive<"E">
    | caseInsensitive<"F">
    | caseInsensitive<"G">

  accidental =
    | double_sharp
    | double_flat
    | sharp
    | flat
    | natural

  double_sharp =
    | "##"
    | "ùÑ™"
    | "‚ôØ‚ôØ"

  double_flat =
    | "bb"
    | "ùÑ´"
    | "‚ô≠‚ô≠"

  sharp =
    | "#"
    | "‚ôØ"

  flat =
    | "b"
    | "‚ô≠"

  natural =
    | "‚ôÆ"

  quality = triadQuality extendedQuality?

  triadQuality =
    | dimTriad
    | augTriad
    | majTriad
    | minTriad
    | power

  majTriad = majQuality

  majQuality =
    | explicitMajTriad
    | implicitMajQuality

  explicitMajTriad =
    | maj ~(extent)

  implicitMajQuality =
    | ~(min | dim | aug | five | hdim)

  minTriad = minQuality

  minQuality =
    | explicitMinTriad
    | implicitMinTriad

  explicitMinTriad =
    | min ~(extent)

  implicitMinTriad =
    | ~(maj | end | extent | six | dim | aug | five | hdim)

  dimTriad = dimQuality

  dimQuality =
    | explicitDimTriad
    | implicitDimTriad

  explicitDimTriad =
    | dim ~(extent)

  implicitDimTriad =
    | &(dim | hdim)

  extendedQuality =
    | majX | minX | domQuality | dimX | hdimX

  domQuality =
    | domX
    | explicitDomX

  min =
    | caseInsensitive<"minor">
    | caseInsensitive<"min">
    | "-"
    | "‚Åª"
    | minor_lowercase_m

  minor_lowercase_m = | ("m" | "·µê") ~ "a"

  power = five

  hdimX = | hdim extent?

  maj =
    | caseInsensitive<"major">
    | caseInsensitive<"maj">
    | "M"
    | "·¥π"
    | "Œî"

  dom =
    | caseInsensitive<"dominant">
    | caseInsensitive<"dom">

  aug =
    | caseInsensitive<"augmented">
    | caseInsensitive<"aug">
    | "+"
    | "‚Å∫"

  dim =
    | caseInsensitive<"diminished">
    | caseInsensitive<"dim">
    | "o"
    | "¬∞"

  hdim =
    | caseInsensitive<"√∏">

  augTriad =
    | aug

  majX =
    | maj extent

  minX =
    | min extent

  domX =
    | ~(dim | maj | min) extent

  explicitDomX =
    | dom extent?

  dimX =
    | dim extent

  extent =
    | seven
    | nine
    | eleven
    | thirteen

  thirteen = | "13" | "¬π¬≥"
  eleven = | "11" | "¬π¬π"
  nine = | "9" | "‚Åπ"
  seven = | "7" | "‚Å∑"
  six = | "6" | "‚Å∂"
  five = | "5" | "‚Åµ"
  four = | "4" | "‚Å¥"
  three = | "3" | "¬≥"
  two = | "2" | "¬≤"

  alterable_degree = two | three | four | five | six | extent

  alteration_symbol =
    | "Œî"
    | "+"
    | "‚Å∫"
    | "o"
    | "¬∞"
    | "-"
    | "‚Åª"
    | caseInsensitive<"√∏">

  alt = caseInsensitive<"alt">

  alteration =
    | alteration_in_parens
    | alter

  alter =
    | alter_raise<alterable_degree> // e.g. #11
    | alter_lower<alterable_degree> // e.g. b13
    | alter_suspend<(two | four)>   // e.g. sus2, sus4
    | alter_compound<root>          // e.g. C/G
    | alter_add_6                   // e.g. C6
    | alter_add_6_add_9             // e.g. C6/9
    | alter_suspend_implicit_4      // e.g. sus
    | alter_add<alterable_degree>   // e.g. add 5, add5
    | alter_omit<alterable_degree>  // e.g. no 5, no5, omit 5, omit5
    | alter_everything<seven>       // e.g. alt7
    | alter_everything_implicit_7   // e.g. alt

  alter_raise<T> = sharp T
  alter_lower<T> = flat T
  alter_add<T> =
    | caseInsensitive<"add"> spaceNoNL* T
  alter_omit<T> =
    | caseInsensitive<"no"> spaceNoNL* T
    | caseInsensitive<"omit"> spaceNoNL* T

  alter_compound<T> = | "/" T
  alter_add_6 = six
  alter_add_6_add_9 = "/" nine
  alter_suspend<T> = | caseInsensitive<"sus"> T
  alter_suspend_implicit_4 = | alter_suspend<"">
  alter_everything<T> = | alt T
  alter_everything_implicit_7 = | alter_everything<"">

  alteration_in_parens = "(" spaceNoNL? alter spaceNoNL? ")"

  newline = "\r"? "\n"
  spaceNoNL = ~newline "\x00".."\x20"
}

// Defines a grammar for a simple, markdown-like format for writing leadsheets
// (actually just chord charts, no melody supported yet)
Song <: Chord {
  Song = metadata* Sections

  Sections = (Section? Bars)+

  Bars = barline (Chordish+ barline)+

  Chordish = chord | OptionalChord | NoChord | RepeatPreviousChord

  OptionalChord = "(" spaceNoNL* chord spaceNoNL* ")"

  Section = SectionName ":"
  SectionName = (~":" ~"|" any)+

  lineComment = "//"(~newline any)+newline
  space += lineComment // this overrides ohmjs's built-in definition of spaces to include our comments. This seems to be the easiest way to get ohmjs to handle comments (e.g. https://github.com/ohmjs/ohm/blob/39ccead882a/examples/simple-lisp/src/simple-lisp.mjs#L35)

  metadata =
    | metaString<"title">
    | metaString<"artist">
    | metaString<"album">
    | metaString<"year">
    | metaString<"sig">
    | metaKey

  metaString<x> = x":" spaceNoNL* (~newline any)+ (newline|lineComment)
  metaKey = "key"":" spaceNoNL* scale (newline|lineComment)

  scale = root scaleFlavor?
  scaleFlavor = (~newline any)+

  barline =
    | barlineWithRepeats
    | doubleBarline
    | singleBarline

  barlineWithRepeats =
    | barRepeatSignifierClose (doubleBarline | singleBarline)
    | (doubleBarline | singleBarline) barRepeatSignifierOpen

  barRepeatSignifierOpen = (digit caseInsensitive<"x">?)? ":"
  barRepeatSignifierClose = ":" (digit caseInsensitive<"x">?)?

  doubleBarline = "||"
  singleBarline = "|"

  RepeatPreviousChord =
    | "-"
    | "%"
    | "/"
    | "ùÑé"

  NoChord =
    | "NC"
    | "N.C."
}
