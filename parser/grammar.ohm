// A grammar for parsing the simple leadsheet format
// - PEG
// - written for OhmJS https://github.com/ohmjs/ohm
// - test it out with the visual editor: https://ohmjs.org/editor
//
// 👉 uppercase names implicitly skip whitespace ("syntactic rule")
// 👉 lowercase names don't ("lexical rule")
//  see: https://ohmjs.org/docs/syntax-reference#syntactic-lexical

// Defines a grammar for Jazz/Pop Chord notation
Chord {
  chord = root flavor

  root = noteLetter accidental?

  flavor = quality extent? alteration*

  noteLetter =
    | caseInsensitive<"A">
    | "B"
    | caseInsensitive<"C">
    | caseInsensitive<"D">
    | caseInsensitive<"E">
    | caseInsensitive<"F">
    | caseInsensitive<"G">

  accidental =
    | double_sharp
    | double_flat
    | sharp
    | flat
    | natural

  double_sharp =
    | "##"
    | "𝄪"
    | "♯♯"

  double_flat =
    | "bb"
    | "𝄫"
    | "♭♭"

  sharp =
    | "#"
    | "♯"

  flat =
    | "b"
    | "♭"

  natural =
    | "♮"

  extent =
    | thirteen
    | eleven
    | nine
    | seven
    | six
    | five
    | four
    | three
    | two

  thirteen = | "13" | "¹³"
  eleven = | "11" | "¹¹"
  nine = | "9" | "⁹"
  seven = | "7" | "⁷"
  six = | "6" | "⁶"
  five = | "5" | "⁵"
  four = | "4" | "⁴"
  three = | "3" | "³"
  two = | "2" | "²"

  quality =
    | sus
    | minor_major
    | augmented
    | diminished
    | dominant
    | half_diminished
    | minor
    | power
    | major

  sus =
    | caseInsensitive<"sus">

  minor_major =
    | minor_major_with_parens
    | caseInsensitive<"minmaj">
    | "mM"
    | "mΔ"
    | "-Δ"
    | "m/M"

  minor_major_with_parens =
    | minor "(" major extent ")"

  augmented =
    | caseInsensitive<"augmented">
    | caseInsensitive<"aug">
    | "+"
    | "⁺"

  diminished =
    | caseInsensitive<"diminished">
    | caseInsensitive<"dim">
    | "o"
    | "°"

  dominant =
    | caseInsensitive<"dominant">
    | caseInsensitive<"dom">
    | implicitDominant

  implicitDominant =
    | &caseInsensitive<"alt"> // `Calt` implies a dominant 7
    | &(seven | nine | eleven | thirteen)

  half_diminished =
    | caseInsensitive<"ø">

  minor =
    | caseInsensitive<"minor">
    | caseInsensitive<"min">
    | "-"
    | "⁻"
    | minor_lowercase_m

  minor_lowercase_m = | ("m" | "ᵐ") ~ "a"

  power =
    | implicitPower

  implicitPower = &(five)

  major =
    | caseInsensitive<"major">
    | caseInsensitive<"maj">
    | "M"
    | "ᴹ"
    | "Δ"
    | implicitMajor

  // NB this must be the last quality we try to match because it will *always* match
  implicitMajor = &(three | six | "")

  alteration =
    | alteration_in_parens
    | alteration_no_parens

  alteration_no_parens =
    | alter_raise<extent>          // e.g. #11,
    | alter_lower<extent>          // e.g. b13,
    | alter_major<extent>          // e.g. M13, Δ13
    | alter_minor<extent>          // e.g. M7
    | alter_suspend<(two | four)>  // e.g. sus2, sus4
    | alter_compound<root>         // e.g. C/G
    | alter_implicit_add_9         // e.g. 6/9 (only intended to handle 6/9 chords)
    | alter_suspend_implicit_4     // e.g. sus
    | alter_add<extent>            // e.g. add 5, add5
    | alter_omit<extent>           // e.g. no 5, no5, omit 5, omit5
    | alter_everything<seven>      // e.g. alt7
    | alter_everything_implicit_7  // e.g. alt

  alter_raise<T> =
    | sharp T

  alter_lower<T> =
    | flat T

  alter_major<T> =
    | major T

  alter_minor<T> =
    | minor T

  alter_add<T> =
    | caseInsensitive<"add"> spaceNoNL* T

  alter_omit<T> =
    | caseInsensitive<"no"> spaceNoNL* T
    | caseInsensitive<"omit"> spaceNoNL* T

  alter_compound<T> =
    | "/" T

  alter_implicit_add_9 =
    | "/" nine

  alter_suspend<T> =
    | caseInsensitive<"sus"> T

  alter_suspend_implicit_4 =
    | alter_suspend<"">

  alter_everything<T> =
    | "alt" T

  alter_everything_implicit_7 =
    | alter_everything<"">

  alteration_in_parens = "(" spaceNoNL? alteration_no_parens spaceNoNL? ")"

  newline = "\r"? "\n"
  spaceNoNL = ~newline "\x00".."\x20"
}

// Defines a grammar for a simple, markdown-like format for writing leadsheets
// (actually just chord charts, no melody supported yet)
Song <: Chord {
  Song = metadata* Sections

  Sections = (Section? Bars)+

  Bars = barline (Chordish+ barline)+

  Chordish = chord | OptionalChord | NoChord | RepeatPreviousChord

  OptionalChord = "(" spaceNoNL* chord spaceNoNL* ")"

  Section = SectionName ":"
  SectionName = (~":" ~"|" any)+

  lineComment = "//"(~newline any)+newline
  space += lineComment // this overrides ohmjs's built-in definition of spaces to include our comments. This seems to be the easiest way to get ohmjs to handle comments (e.g. https://github.com/ohmjs/ohm/blob/39ccead882a/examples/simple-lisp/src/simple-lisp.mjs#L35)

  metadata =
    | metaString<"title">
    | metaString<"artist">
    | metaString<"album">
    | metaString<"year">
    | metaString<"sig">
    | metaKey

  metaString<x> = x":" spaceNoNL* (~newline any)+ (newline|lineComment)
  metaKey = "key"":" spaceNoNL* scale (newline|lineComment)

  scale = root scaleFlavor?
  scaleFlavor = (~newline any)+

  barline =
    | barlineWithRepeats
    | doubleBarline
    | singleBarline

  barlineWithRepeats =
    | barRepeatSignifierClose (doubleBarline | singleBarline)
    | (doubleBarline | singleBarline) barRepeatSignifierOpen

  barRepeatSignifierOpen = (digit caseInsensitive<"x">?)? ":"
  barRepeatSignifierClose = ":" (digit caseInsensitive<"x">?)?

  doubleBarline = "||"
  singleBarline = "|"

  RepeatPreviousChord =
    | "-"
    | "%"
    | "/"
    | "𝄎"

  NoChord =
    | "NC"
    | "N.C."
}
